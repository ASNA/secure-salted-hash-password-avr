Using System
Using System.Text
Using System.Security.Cryptography

DclNamespace Helpers

BegClass PasswordManagement Access(*Public) 

    // The hashing function is iterative and it needs a 
    // value to indicate the number of iterations it should 
    // take. This number should be 1000+. 1152 sounded 
    // about right to me! Change it something else for your
    // implementation.
    DclConst HASH_ITERATIONS Value(1152)

    // If total hash length is 96 (salt = 48 and hash = 48) 
    // then the Base64-encoded length of the total 
    // salted hash is 128. If you change HASH_LENGTH or 
    // SALT_LENGTH you have to determine and change the 
    // the EXPECTED_SALTED_HASH_LENGTH.

    // EXPECTED_SALTED_HASH_LENGTH is used only in unit tests and the 
    // expected length is only significant for knowing what field 
    // length is needed for storing the string value of the 
    // salted hash in a fixed-length field. 

    // Note these values DO NOT imply a minimum password length. The 
    // code is tested on passwords up 1024 characters long. 

    DclConst HASH_LENGTH Value(48)
    DclConst SALT_LENGTH Value(48)
    DclConst EXPECTED_SALTED_HASH_LENGTH Value(128) Access(*Public) 

    // These GetRandomPassword methods are not recommened for production use. 
    // The strength of the password generated is unknown. There are 
    // much better algorithms for creating random passwords. That said, 
    // it's unlikely you should ever generate a password. Set your app
    // up so that's the user's responsibility. 
    BegFunc GetRandomPassword Type(*String) Access(*Public) Shared(*Yes) 
        DclConst RANDOM_PASSWORD_DEFAULT_LENGTH Value(24)

        LeaveSr GetRandomPassword(RANDOM_PASSWORD_DEFAULT_LENGTH) 
    EndFunc

    BegFunc GetRandomPassword Type(*String) Access(*Public) Shared(*Yes) 
        DclSrParm PasswordLength Type(*Integer4) 

        DclFld crypto Type(RNGCryptoServiceProvider) New()
        DclArray passwordBytes Type(System.Byte) Rank(1)

        passwordBytes = *New System.Byte[PasswordLength]
        crypto.GetBytes(passwordBytes)

        LeaveSr Convert.ToBase64String(passwordBytes) 
    EndFunc 

    BegFunc AuthenticateUserPassword Type(*Boolean) Access(*Public) Shared(*Yes) 
        DclSrParm clearTextPassword Type(*String) 
        DclSrParm saltedHash Type(*String) 

        DclArray hashBytes Type(System.Byte) Rank(1)
        DclArray newHashBytes Type(System.Byte) Rank(1)
        DclArray saltBytes Type(System.Byte) Rank(1)
        DclFld hashMaker Type(Rfc2898DeriveBytes)
        DclFld hashBytesPosition Type(*Integer4) 

        // Convert salted hash to a byte stream. 
        hashBytes = Convert.FromBase64String(saltedHash.Trim())
        // First SALT_LENGTH bytes are the salt. 
        saltBytes = *New System.Byte[SALT_LENGTH]
        // Copy just the salt bytes of saltedHash into the saltBytes bytes array. 
        Array.Copy(hashBytes, 0, saltBytes, 0, SALT_LENGTH)

        // Create a new salted hash. 
        hashMaker = *New Rfc2898DeriveBytes(clearTextPassword, saltBytes)
        hashMaker.IterationCount = HASH_ITERATIONS
        newHashBytes = hashMaker.GetBytes(HASH_LENGTH)

        // Compare its bytes starting at SALT_LENGTH to the end 
        // (which is the hashed value of the the password only)
        // to the new password hash. 
        For  Index(hashBytesPosition = 0) To(HASH_LENGTH - 1) 
            If hashBytes[hashBytesPosition + HASH_LENGTH ] <> newHashBytes[hashBytesPosition]
                LeaveSr *False
            EndIf 
        EndFor

        LeaveSr *True
    EndFunc 

    BegFunc CreateSaltedHash Type(*String) Access(*Public) Shared(*Yes) 
        DclSrParm clearTextPassword Type(*String) 

        DclFld saltMaker Type(RNGCryptoServiceProvider) New()
        DclArray saltData Type(System.Byte) Rank(1)
        DclArray hashData Type(System.Byte) Rank(1)
        DclArray hashBytes Type(System.Byte) Rank(1)
        DclFld hashMaker Type(Rfc2898DeriveBytes)
         
        saltData = *New System.Byte[SALT_LENGTH]

        // Generate a new random salt value. 
        // See this link for more info: t.ly/drkqD
        saltMaker.GetBytes(saltData)

        hashMaker = *New Rfc2898DeriveBytes(clearTextPassword, saltData, HASH_ITERATIONS)
        
        // Generate a new hash value of the password.
        hashData = hashMaker.GetBytes(HASH_LENGTH)
        // Join the two resulting byte streams to form the salted hash. 
        hashBytes = *New System.Byte[SALT_LENGTH + HASH_LENGTH]
        // hashBytes contains the combined bytes of the salt 
        // and the password hash. 
        // The first SALT_LENGTH bytes are the salt and the next 
        // HASH_LENGTH bytes are the password hash. The total bytes 
        // are the combined salt and password hash. 

        // | Salt     | Hash     |
        // | n bytes  | n bytes  |

        // When hashBytes is converted to a base 64 string, the 
        // resulting string is longer than SALT_LENGTH + HASH_LENGTH. 
         Array.Copy(saltData, 0, hashBytes, 0, SALT_LENGTH)
         Array.Copy(hashData, 0, hashBytes, SALT_LENGTH, HASH_LENGTH)

        // Return the string value of the salted hash. 
        LeaveSr Convert.ToBase64String(hashBytes)
    EndFunc 

EndClass

